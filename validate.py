# -*- coding: utf-8 -*-
"""validate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14FYgMUCnnwjndDBWQeGw5jmWQ4Ncttmy
"""

from collections import defaultdict, Counter

def validate(data, template, parent_key=''):
    for key, expected_type in template.items():
        # Construct the key path
        key_path = f"{parent_key}{key}" if parent_key else key

        # Check if the key is present in the data
        if key not in data:
            return False, f'mismatched keys: {key_path}'

        value = data[key]

        # Check the type of the value
        if isinstance(expected_type, type):  # If the expected type is a built-in type
            if not isinstance(value, expected_type):
                return False, f'bad type: {key_path}'
        elif isinstance(expected_type, dict):  # If the expected type is a nested dictionary
            if not isinstance(value, dict):
                return False, f'bad type: {key_path}'
            # Recursively validate the nested dictionary
            valid, error = validate(value, expected_type, f"{key_path}.")
            if not valid:
                return False, error

    # Ensure there are no extra keys in the data
    for key in data.keys():
        if key not in template:
            return False, f'mismatched keys: {parent_key + key if parent_key else key}'

    return True, ''

    from collections import defaultdict, Counter

# Function to merge dictionaries using defaultdict
def merge_with_defaultdict(*dicts):
    merged_dict = defaultdict(int)
    for d in dicts:
        for word, freq in d.items():
            merged_dict[word] += freq
    return dict(merged_dict)

# Function to merge dictionaries using Counter
def merge_with_counter(*dicts):
    merged_dict = Counter()
    for d in dicts:
        merged_dict.update(d)
    return dict(merged_dict)
